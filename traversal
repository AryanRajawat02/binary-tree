// binary tree

// level order traversal
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
         vector<vector<int>>ans;
         if(root==NULL)return ans;
         queue<TreeNode*>q;
         q.push(root);
         while(q.empty()==false)
         {
            int size=q.size();
            vector<int>level;
            for(int i=0;i<size;i++)
            {  
                auto it=q.front();
                q.pop();
                level.push_back(it->val);
                if(it->left)q.push(it->left);
                if(it->right)q.push(it->right);
   
            }
            ans.push_back(level);
         }
         return ans;
    }
};
// preorder traversal
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
          vector<int>ans;
           if(root==NULL)return ans;
           stack<TreeNode*>st;
           st.push(root);
           while(!st.empty())
           {
               TreeNode *node=st.top();
               st.pop();
               ans.push_back(node->val);
               if(node->right)st.push(node->right);
               if(node->left)st.push(node->left);
           }
           return ans;
    }
};

// post order traversal





