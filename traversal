// binary tree

// level order traversal    
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
         vector<vector<int>>ans;
         if(root==NULL)return ans;
         queue<TreeNode*>q;
         q.push(root);
         while(q.empty()==false)
         {
            int size=q.size();
            vector<int>level;
            for(int i=0;i<size;i++)
            {  
                auto it=q.front();
                q.pop();
                level.push_back(it->val);
                if(it->left)q.push(it->left);
                if(it->right)q.push(it->right);
   
            }
            ans.push_back(level);
         }
         return ans;
    }
};
// preorder traversal   rLR
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
          vector<int>ans;
           if(root==NULL)return ans;
           stack<TreeNode*>st;
           st.push(root);
           while(!st.empty())
           {
               TreeNode *node=st.top();
               st.pop();
               ans.push_back(node->val);
               if(node->right)st.push(node->right);
               if(node->left)st.push(node->left);
           }
           return ans;
    }
};

// in order traversal     LrR
 class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
         vector<int>inorder;
         if(root==NULL)return inorder;
         TreeNode *node=root;
         stack<TreeNode*>st;
         while(true)
         {
            if(node!=NULL)
            {
                st.push(node);
                node=node->left;
            }
            else
            {
                if(st.empty())break;
                node=st.top();
                st.pop();
                inorder.push_back(node->val);
                node=node->right;
            }
         }
         return inorder;
    }
};

// post order traversal   LRr

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
          vector<int>ans;
          if(root==NULL)return ans;
          stack<TreeNode*>s1,s2;
          s1.push(root);
          while(!s1.empty())
          {
             auto it=s1.top();
             s1.pop();
             s2.push(it);
             if(it->left)s1.push(it->left);
             if(it->right)s1.push(it->right);

          }
          while(!s2.empty())
          {
              ans.push_back(s2.top()->val);
              s2.pop();
          }
          return ans;
    }
};

 // all traversal in one 
 
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
           vector<int>pre,in,post;
           if(root==NULL)return pre;
           stack<pair<TreeNode*,int>>st;
           st.push({root,1});
           while(st.empty()==false)
           {
               auto it=st.top();
               st.pop();
               if(it.second==1)
               {
                   pre.push_back(it.first->val);
                   it.second++;
                   st.push(it);
                   if(it.first->left!=NULL)st.push({it.first->left,1});
               }
               else if(it.second==2)
               {
                   in.push_back(it.first->val);
                   it.second++;
                   st.push(it);
                   if(it.first->right)st.push({it.first->right,1});
               }
               else
               {
                   post.push_back(it.first->val);
               }
           }
           for(auto it:pre)
           {
               cout<<it<<" ";
           }
           cout<<endl;
           for(auto it:in)
           {
               cout<<it<<" ";
           }
           cout<<endl;
           for(auto it:post)
           {
               cout<<it<<" ";
           }
           cout<<endl;
           return pre;

    }
};



